from turtle import *#imports the turtle module with all of its functions
from freegames import line#imports the freegames module with all of its function

turns = {'red': 'yellow', 'yellow': 'red'}#turns is used to determine the turns of each player
state = {'player': 'yellow', 'rows': [4] * 14}#Second state value used to set inital placement of disks at different y values
state2 = {'player2': 'yellow', 'rows2': [3] * 14}#Second state value used to set inital placement of disks at different y values

def grid(): #defines the placement of a visual grid as reference for the players
    """Draw Connect Four grid."""
    bgcolor('light blue')#intializes colour of grid

    for x in range(-350, 400, 50):#gives the area the lines can be (lengh from left, lengh from right, space between)
                                  #x and values changed to support larger 14*14 board
        line(x, -300, x, 300)#gives the lengh of each of the lines(lengh going up, lengh going down)
                             #x and y values changed to support larger 14*14 board
    line(-350, 0, 350, 0)#new center line that seperates two sides of the board
        
    for x in range(-325, 350, 50):#gives the area the disk can be (offsets disk position, number of disk lines, width between disks)
                                  #x and values changed to support larger 14*14 board
        for y in range(-275, 300, 50):#(removes disks from bottom, removes from top, width of disks)
                                      #x and values changed to support larger 14*14 board
            up()#stops turtle from inserting another shape in the place clicked on
            goto(x, y)#it makes the turtle draw a disk on the specified coordinates
            dot(40, 'white')#draws a dot with a with the specified dimensions and colour

    update()#updates the value associated with the input of the click on the spaces

datalist=[] #empty list which will contain information on each position of the grid - JE
boardcoords=[] #empty list which will contain coordinates for every spot there can be a piece -JE
for rows in range(12): #goes through the 12 horizontal rows of the grid -JE
    row=[] #empty list which will contain information of the current row being worked on -JE
    for col in range(14): #goes through the 14 vertical columns of the grid -JE
        row.append(1) #Puts a 1 in each position. 1 is the neutral state, meaning there is no piece in this position -JE
    datalist.append(row) #Adds row to list of position information. Final list with all 12 rows simulates a 14 by 12 position board where each value determines if there is no piece (1), a yellow piece (0), or a red piece (2). As the game has just begun, there are no pieces so every value is a one. -JE
for y in range(-275, 300, 50): #goes through the y-coordinates of every position -JE
    row=[] #starts a new row of coordinates -JE
    for x in range(-325, 350, 50): #goes through x-coordinates of every postition -JE
        row.append((x,y)) #adds coordinates to row -JE
    boardcoords.append(row) #adds row of coordinates to list of coordinates, where every coordinate has a corrisponding position in the datalist. -JE

def winner(plrc): #defines function which will tell the payers when someone wins. -JE
    goto(-150,-50) #brings pen for drawing to coordinate (-100,-50) -JE
    width(10) #sets drawing width to size 10 -JE
    fillcolor('white') #sets fill colour to white -JE
    begin_fill() #shapes drawn after this line will be filled with the fill colour -JE
    for drrc in range(2): #Starts drawing rectangle one half at a time -JE
        forward(300) #Draws horizontal line with  the magnitude of the width of the rectangle -JE
        left(90) #pen rotates 90 degrees counter-clockwise -JE
        forward(100) #Draws vertical line with  the magnitude of the height of the rectangle -JE
        left(90) #pen rotates 90 degrees counter-clockwise -JE
    end_fill() # shapes between this line and the beginfill() function will be filled with fill colour -JE
    style=('Arial',20,'bold') # sets font of text -JE
    dsplclr=plrc.upper() #takes colour which has just won the game and turns into a string of uppercase letters -JE
    penup() #tells pen to stop drawing -JE
    goto(0,0) #brings pen to the center -JE
    color('black') # sets colour to black so the text will be black -JE
    write((dsplclr+" WON!"),font=style,align='center') #generates text which says who won -JE
    exitonclick() #tells the program to close the game after someone clicks. the game is now over. -JE

    
def checkline(plrc): #function which will check if any pieces of the same colour form a line of 4 -JE
    for y in range(len(datalist)): #goes to rows of the simulatied board -JE
        for x in range(len(datalist[y])): #goes through columns of the simulated board -JE
            if datalist[y][x]!=1: #everytime the code hits a potion containing a piece, it will check for if it is in a line. -JE
                if y<9 and x<11: #the first line-check is only valid if the piece is at least 4 spaces from the bottom and right edge. -JE
                    if (datalist[y][x]==datalist[y+1][x+1] and datalist[y][x]==datalist[y+2][x+2] and datalist[y][x]==datalist[y+3][x+3]): #checks if piece is in a diagonal line going down right -JE
                        return winner(plrc) #if in a line, calls the function which says who won -JE
                if y<9: # the next line-check is only valid if the piece is at least 4 spaces from the bottom -JE
                    if (datalist[y][x]==datalist[y+1][x] and datalist[y][x]==datalist[y+2][x] and datalist[y][x]==datalist[y+3][x]): #checks if piece is in vertical line -JE
                        return winner(plrc) #if in a line, calls the function which says who won -JE
                if x<11: # the next line-check is only valid if piece is at least 4 spaces from the right edge -JE
                    if(datalist[y][x]==datalist[y][x+1] and datalist[y][x]==datalist[y][x+2] and datalist[y][x]==datalist[y][x+3]):#checks if the piece is in a horizontal line -JE
                        return winner(plrc) #if in a line, calls the function which says who won -JE
                if y>4 and x>4: #the last line-check is only valid if the piece is 4 spaces from the top and left edge -JE
                    if (datalist[y][x]==datalist[y+1][x-1] and datalist[y][x]==datalist[y+2][x-2] and datalist[y][x]==datalist[y+3][x-3]): #checks if the piece is in a diagonal line going down left -JE
                        return winner(plrc) #if in a line, calls the function which says who won -JE

def pieceplace(xcoor,ycoor,plrc): #defines funtion which will change the value of the space which just got a piece to represent which colour of piece that postion of the board now holds -JE
    for y in range(len(boardcoords)): #goes through the y-coordinates of the spaces on the screen -JE
        for x in range(len(boardcoords[y])): #goes through the y-coordinates of the spaces on the screen -JE
            if boardcoords[y][x]==(xcoor,ycoor): #detects when the x and y coordinates in the list of coordinates match the coordinates of the piece which was just placed -JE
                if plrc=='red': #detects colour of the piece that was just placed -JE
                    datalist[y][x]+=1 #changes the value of the position in the data list corrisponding to the onscreen coordinates to a 2 to represent a red piece in now in that position. -JE
                if plrc=='yellow': #detects colour of the piece that was just placed -JE
                    datalist[y][x]-=1 #changes the value of the position in the data list corrisponding to the onscreen coordinates to a 0 to represent a yellow piece in now in that position. -JE
                checkline(plrc) #checks if a line of 4 has been made after the last move -JE

def tap(x, y):#Draws a red or yellow disk in the tapped rows
    """Draw red or yellow disk in tapped row."""
    
    if (( x< -350 or 350 < x ) == True):#defines the boundries of the game and where a player is able to place a disk
       None
        
    elif (y > 0) == True:#function that checks if disk is placed above the line of the grid
        player = state['player']#initializes player turn values
        rows = state['rows']#initializes row values
        
        row = int((x + 200) // 50)#calculates the x value for each disk placed
        count = rows[row]#Initializes the row value to calculate for y and other calculations
        x = ((x + 200) // 50) * 50 - 175 # (((x) + Where dot is placed relative to clicked row) // width btwn rows) * (width2) - (where dot2) + (slight offset (combined with "where dot2"))
        y = count * 50 - 175 #Uses count from above to do same as x
        
        up()#stops turtle from inserting another shape in the place clicked on
        goto(x, y)#it makes the turtle draw a disk on the specified coordinates
        dot(40, player)#draws a dot with a with the specified colour and the player
        update()#updates the value associated with the input of the click on the spaces
        
        rows[row] = count + 1#Allows turtle tp draw two disks on top of each of it by 1 y value higher
        pieceplace(x,y,player) #records postion of the piece that was just played in the datalist -JE
        state['player'] = turns[player]#Changes the player turn based off of the given player's turn. Erg. Yellow changed to red, Red changed to Yellow
        state2['player2'] = state['player']#Applies the player turn change to both halves of the game board
        
    elif (y < 0) == True:#function that checks if disk is placed below the line of the grid
        player2 = state2['player2']#initializes player turn values
        rows2 = state2['rows2']#initializes row values
        
        row2 = int((x + 200) // 50)#calculates the x value for each disk placed
        count2 = rows2[row2]#Initializes the row value to calculate for y and other calculations
        x = ((x + 200) // 50) * 50 - 175 # (((x) + Where dot is placed relative to clicked row) // width btwn rows) * (width2) - (where dot2) + (slight offset)
        y = count2 * 50 - 175 #Uses count from above to do same as x
        
        up()#stops turtle from inserting another shape in the place clicked on
        goto(x, y)#it makes the turtle draw a disk on the specified coordinates
        dot(40, player2)#draws a dot with a with the specified colour and for the player
        
        update()#updates the value associated with the input of the click on the spaces
        rows2[row2] = count2 - 1 #Allows turtle tp draw two disks on top of each of it by 1 y value lower
        pieceplace(x,y,player2) #records postion of the piece that was just played in the datalist -JE
        state2['player2'] = turns[player2]#Changes the player turn based off of the given player's turn. Erg. Yellow changed to red, Red changed to Yellow
        state['player'] = state2['player2']#Applies the player turn change to both halves of the game board

setup(820, 720, 370, 0)#determines the width and length of the resolution of the game
hideturtle()#hides the turtle interface
tracer(False)#Disables all turtle animations and delays
grid()#determines the column and row positioning of the parameters of tge game
onscreenclick(tap)#the turtle performs an action where the user clicks
done()#this starts the loop function
